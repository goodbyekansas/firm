# This was based on the winlog crate
# in order to implement Drain for slog.,
{ base, pkgsCross ? null, writeScript }:
let
  windowsMessages = pkgsCross.mingwW64.stdenv.mkDerivation {
    name = "windows-messages";
    src = ./message_types;

    builder = writeScript "builder.sh" ''
      source $stdenv/setup
      mkdir -p $out

      x86_64-w64-mingw32-windmc -U -h $out -r $out $src/eventmsgs.mc
      x86_64-w64-mingw32-windres -v -i $out/eventmsgs.rc -o $out/eventmsgs.lib

      # Takes the h file and converts it into an rs equivalent.
      sed 's/#define/pub const/;
           s|//.*||;
           s/ (DWORD)//;
           s/ 0x/: u32 = 0x/;
           s/\([0-9]\)$/\1;/;
           /^\s*$/d;
           /^pub const/!d' $out/eventmsgs.h > $out/eventmsgs.rs
    '';
  };

  buildRs = ''
    // Auto generated file by nix. Do not edit this file.
    fn main() {
        println!(
            r#\"cargo:rustc-link-search=native=${windowsMessages}\"#
        );
        println!(\"cargo:rustc-link-lib=dylib=eventmsgs\");
    }'';

  linkMessageSource = ''
    if [ -d "message_source" ]; then
      unlink message_source
    fi

    ln -fs ${windowsMessages} message_source
    echo "${buildRs}" > build.rs
  '';

in
(base.languages.rust.mkLibrary {
  name = "windows-events";
  version = "0.1.0";
  src = ./.;

  crossTargets = {
    windows = {
      buildInputs = [ pkgsCross.mingwW64.windows.pthreads ];
    };
  };

  shellHook = linkMessageSource;
  preConfigurePhases = [ "linkMessageSource" ];
  inherit linkMessageSource;
}).overrideAttrs (oldAttrs: {
  # This component only works on windows so lets make that the default for the shell
  # This is a bit of a hack. Can remove this once the following issue is fixed.
  # https://github.com/goodbyekansas/nedryland/issues/220
  rust = oldAttrs.windows;
  package = oldAttrs.windows;
})
