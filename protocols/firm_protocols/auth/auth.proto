syntax = "proto3";
package firm_protocols.auth;
import "google/protobuf/empty.proto";

/**
 * Management service for remote access and external credentials
 */
service Authentication {
  /**
   * Acquire a new access token for a given scope
   */
  rpc AcquireToken (AcquireTokenParameters) returns (Token);

  /**
   * Authenticate a remote request and optionally create a remote access request
   */
  rpc Authenticate (AuthenticationParameters) returns (AuthenticationResponse);

  /**
   * List non-expired access requests
   */
  rpc ListRemoteAccessRequests (RemoteAccessListParameters) returns (RemoteAccessRequests);

  /**
   * Approve a remote access request
   */
  rpc ApproveRemoteAccessRequest (RemoteAccessApproval) returns (RemoteAccessRequest);

  /**
   * Get a single remote access request
   */
  rpc GetRemoteAccessRequest (RemoteAccessRequestId) returns (RemoteAccessRequest);

  /**
   * Wait for a remote access request to be approved.
   *
   * Use this together with a timeout for best user experience since it will wait
   * indefinitely otherwise.
   */
  rpc WaitForRemoteAccessRequest (RemoteAccessRequestId) returns (RemoteAccessRequest);

  /**
   * Cancel a pending remote access request
   *
   * This cannot be used to revoke already approved access
   */
  rpc CancelRemoteAccessRequest (RemoteAccessRequestId) returns (RemoteAccessRequest);

  /**
   * Get the identity of the current user
   */
  rpc GetIdentity (google.protobuf.Empty) returns (Identity);

  /**
   * Perform an interactive login.
   *
   * This can be used to cache tokens
   * for all token providers that require interaction when logging in.
   */
  rpc Login(google.protobuf.Empty) returns (stream InteractiveLoginCommand);
}

message InteractiveLoginCommand {
  oneof command {
    BrowserAuth browser = 1;
  }
}

message BrowserAuth {
  string url = 1;
}

message AcquireTokenParameters {
  string scope = 1;
}

message Identity {
  string name = 1;
  string email = 2;
}

message Token {
  string token = 1;
  uint64 expires_at = 2;
  string scope = 3;
}

message AuthenticationParameters {
  string expected_audience = 1;
  string token = 2;
  bool create_remote_access_request = 3;
}

message RemoteAccessRequests {
  repeated RemoteAccessRequest requests = 1;
}

message AuthenticationResponse {
  RemoteAccessRequestId remote_access_request_id = 1;
}

message RemoteAccessRequestId {
  string uuid = 1;
}

message RemoteAccessRequest {
  RemoteAccessRequestId id = 1;
  string subject = 2;
  uint64 expires_at = 3;
  bool approved = 4;
}

message RemoteAccessApproval {
  bool approved = 1;
  RemoteAccessRequestId id = 2;
}

message RemoteAccessListParameters {
  string subject_filter = 1;
  bool include_approved = 2;
  Ordering order = 3;
}

message Ordering {
  OrderingKey key = 1;
  bool reverse = 2;
  uint32 offset = 3;
  uint32 limit = 4;
}


enum OrderingKey { 
  SUBJECT = 0;
  EXPIRES_AT = 1;
}
