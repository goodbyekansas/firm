syntax = "proto3";

package firm_protocols.functions;


service Execution {
  rpc QueueFunction (ExecutionParameters) returns (ExecutionId);
  rpc RunFunction (ExecutionId) returns (ExecutionResult);
  rpc FunctionOutput (ExecutionId) returns (stream FunctionOutputChunk);
  rpc ListRuntimes (RuntimeFilters) returns (RuntimeList);
}

message FunctionOutputChunk {
  string channel = 1;
  string output = 2;
}

message ExecutionParameters {
  string name = 1;
  string version_requirement = 2;
  Stream arguments = 3;
}


message Stream {
  map<string, Channel> channels = 1;
}


message Channel {
  oneof value {
    Strings strings = 1;
    Integers integers = 2;
    Floats floats = 3;
    Booleans booleans = 4;
    Bytes bytes = 5;
  }
}


message Bytes {
  bytes values = 1;
}


message Strings {
  repeated string values = 1;
}


message Integers {
  repeated int64 values = 1;
}


message Floats {
  repeated double values = 1;
}


message Booleans {
  repeated bool values = 1;
}


message ExecutionResult {
  ExecutionId execution_id = 1;
  oneof result {
    ExecutionError error = 2;
    Stream ok = 3;
  }
}


message ExecutionId {
  string uuid = 1;
}


message ExecutionError {
  string msg = 1;
}

message RuntimeFilters {
  string name = 1;
}

message Runtime {
  string name = 1;
  string source = 2;
}

message RuntimeList {
  repeated Runtime runtimes = 1;
}
