syntax = "proto3";

package firm_protocols.functions;


service Execution {
  rpc QueueFunction (FunctionUri) returns (ExecutionId);
  rpc RunFunction (stream FunctionInput) returns (stream FunctionOutput);
  rpc FunctionLog (ExecutionId) returns (stream FunctionLogMessage);
  rpc ListRuntimes (RuntimeFilters) returns (RuntimeList);
}

message FunctionLogMessage {
  string channel = 1;
  string output = 2;
}


message FunctionUri {
  string uri = 1;
}


message FunctionInput {
  oneof payload {
    Header header = 1;
    ChannelPacket data = 2;
  }
}

message Header {
  ExecutionId id = 1;
  bool strict = 2;
}

message FunctionOutput {
  oneof result {
    ExecutionError error = 1;
    ChannelPacket ok = 2;
  }
}

message ChannelPacket {
  string channel = 1;
  bytes data = 2;
}



message ExecutionId {
  string uuid = 1;
}


message ExecutionError {
  string msg = 1;
}

message RuntimeFilters {
  string name = 1;
}

message Runtime {
  string name = 1;
  string source = 2;
}

message RuntimeList {
  repeated Runtime runtimes = 1;
}
