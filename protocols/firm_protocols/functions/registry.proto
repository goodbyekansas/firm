syntax = "proto3";

package firm_protocols.functions;

import "firm_protocols/functions/functions.proto";

/**
 * Function registry is a searchable of published functions.
 */
service Registry {

  /**
   * List the latest versions of functions matching the search criteria.
   */
  rpc List(Filters) returns (functions.Functions);

  /**
   * List versions of a specific function, matching the criteria.
   */
  rpc ListVersions(Filters) returns (functions.Functions);

  /**
   * Get exactly one function, matching the name and version.
   */
  rpc Get(FunctionId) returns (functions.Function);

  /**
   * Register a new function.
   */
  rpc Register(FunctionData) returns (functions.Function);

  /**
   * Register an attachment. Attachments can be associated with functions when registering.
   */
  rpc RegisterAttachment(AttachmentData) returns (AttachmentHandle);
}


message Nothing {}

/**
 * Filters for List and ListVersions
 */
message Filters {
  /**
   * The name to match against, on List this is a substring match; on ListVersions
   * this is an exact name.
   */
  string name = 1;
  // A semver version requirement to match
  VersionRequirement version_requirement = 2;
  // A Hashmap of key, value pairs to match against. An empty field matches anything.
  map<string, string> metadata = 3;
  Ordering order = 4;
  // Substring match on publisher email
  string publisher_email = 5;
}


message FunctionId {
  string name = 1;
  string version = 2;
}


message VersionRequirement {
  string expression = 1;
}


message Ordering {
  OrderingKey key = 1;
  bool reverse = 2;
  uint64 offset = 3;
  uint64 limit = 4;
}


// ListVersion sorts by version and List sorts by name, these could be broken up if more
// keys are needed
enum OrderingKey { NAME_VERSION = 0; }


message FunctionData {
  string name = 1;
  string version = 2;
  map<string, string> metadata = 3;
  map<string, firm_protocols.functions.ChannelSpec> inputs = 4;
  map<string, firm_protocols.functions.ChannelSpec> outputs = 5;
  firm_protocols.functions.RuntimeSpec runtime = 6;
  repeated AttachmentId attachment_ids = 7;
  firm_protocols.functions.Publisher publisher = 8;
  firm_protocols.functions.Signature signature = 9;
}


// TODO kill me please
message AttachmentStreamUpload {
  AttachmentId id = 1;
  bytes content = 2;
}


message AttachmentData {
  string name = 1;
  map<string, string> metadata = 2;
  firm_protocols.functions.Checksums checksums = 3;
  firm_protocols.functions.Publisher publisher = 4;
  firm_protocols.functions.Signature signature = 5;
}


message AttachmentId {
  string uuid = 1;
}


message AttachmentHandle {
  AttachmentId id = 1;
  string upload_url = 2;
}
