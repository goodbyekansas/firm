{ base, pkgs, protobuf, rustProtoCompiler, includeServices, protoSources }:
let
  tonicDependencyString = ''tonic = { version = "0.3", features = ["tls", "tls-roots"] }'';
  packageName = "firm-protocols";

  srcDeriv = pkgs.stdenv.mkDerivation rec {
    inherit rustProtoCompiler protoSources;
    name = "rust-firm-protocols-src";

    PROTOC = "${protobuf}/bin/protoc";

    src = builtins.path { path = ./.; inherit name; };

    # seem to need rustfmt, prob run on the resulting code
    nativeBuildInputs = [ pkgs.rustfmt ];

    buildPhase = ''
      $rustProtoCompiler/bin/rust-protobuf-compiler -I $protoSources \
      ${if includeServices then "--build-services" else ""} \
      -o ./src \
      $protoSources/**/*.proto

      substitute Cargo.toml.in ./Cargo.toml \
      --subst-var-by includeTonic ${if includeServices then "'${tonicDependencyString}'" else "''"} \
        --subst-var-by packageName ${packageName}

      # generate a useable lib.rs
      echo "// Generated by firm, do not edit" > ./src/lib.rs

      shopt -s extglob globstar nullglob
      for f in ./src/**/!(lib).rs; do
        echo "pub mod $(basename "$f" .rs);" >> ./src/lib.rs
      done

      ${if includeServices then "echo 'pub use tonic;' >> ./src/lib.rs" else "" }
    '';

    installPhase = ''
      mkdir $out
      cp -r Cargo.toml src $out/
    '';
  };
in
base.languages.rust.mkUtility {
  name = "rust-firm-protocols";
  src = srcDeriv;
}
