{ base, pkgs, protobuf, rustProtoCompiler, includeServices }:
let
  tonicDependencyString = ''tonic = { version = "0.3", features = ["tls", "tls-roots"] }'';
  packageName = "firm-protocols";
in
base.languages.rust.mkUtility {
  inherit rustProtoCompiler;
  name = "rust-firm-protocols";
  PROTOC = "${protobuf}/bin/protoc";

  src = ../.;

  configurePhase = ""; # don't need the standard rust configurePhase, because it's not a standard rust package

  buildPhase = ''
    $rustProtoCompiler/bin/rust-protobuf-compiler -I ./ ${if includeServices then "--build-services" else ""} -o ./${packageName}/src **/*.proto
    substitute rust/Cargo.toml.in ./${packageName}/Cargo.toml \
    --subst-var-by includeTonic ${if includeServices then "'${tonicDependencyString}'" else "''"} \
    --subst-var-by packageName ${packageName}

    # generate a useable lib.rs
    echo "// Generated by firm, do not edit" > ./${packageName}/src/lib.rs
    shopt -s extglob
    shopt -s globstar
    shopt -s nullglob
    for f in ./${packageName}/src/**/!(lib).rs; do
      echo "pub mod $(basename "$f" .rs);" >> ./${packageName}/src/lib.rs
    done
    ${if includeServices then "echo 'pub use tonic;' >> ./${packageName}/src/lib.rs" else "" }
  '';

  checkPhase = ''
    # check that it works
    export CARGO_HOME=$PWD
    cargo build --manifest-path=./${packageName}/Cargo.toml
    rm -rf ./${packageName}/target ./${packageName}/Cargo.lock
  '';

  installPhase = ''
    mkdir -p $out
    cp -r ${packageName}/* $out/
  '';
}
